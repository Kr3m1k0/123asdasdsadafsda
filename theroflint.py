import discord
from discord import app_commands
from discord.ext import commands
import sqlite3
import random
import string
import asyncio
from flask import Flask, request, jsonify
from flask_cors import CORS
import threading
import logging
import httpx
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
GUILD_ID = int(os.getenv('GUILD_ID', '680473306440269852'))
MEMBER_ROLE_ID = int(os.getenv('MEMBER_ROLE_ID', '1418321489576333345'))
VIEWER_ROLE_ID = int(os.getenv('VIEWER_ROLE_ID', '1418321452028919944'))
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'ABOBAROFLINT228ZXC')

# URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
MAIN_API_URL = os.getenv('MAIN_API_URL', 'http://localhost:8000')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class KeyBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True
        super().__init__(command_prefix='!', intents=intents)
        self.db_path = 'keys_database.db'
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()

        c.execute('''
            CREATE TABLE IF NOT EXISTS keys (
                key TEXT PRIMARY KEY,
                user_id INTEGER,
                used BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                used_at TIMESTAMP
            )
        ''')

        c.execute('''
            CREATE TABLE IF NOT EXISTS verification_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                key TEXT,
                role_given TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        conn.commit()
        conn.close()

    def generate_keys(self, count=15000):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()

        c.execute("SELECT COUNT(*) FROM keys")
        existing_count = c.fetchone()[0]

        if existing_count >= count:
            logger.info(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_count} –∫–ª—é—á–µ–π")
            conn.close()
            return

        keys_to_generate = count - existing_count
        generated = 0

        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {keys_to_generate} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π...")

        while generated < keys_to_generate:
            key = ''.join(random.choices(string.ascii_letters + string.digits, k=16))

            try:
                c.execute("INSERT INTO keys (key) VALUES (?)", (key,))
                generated += 1

                if generated % 1000 == 0:
                    conn.commit()
                    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {generated}/{keys_to_generate} –∫–ª—é—á–µ–π")

            except sqlite3.IntegrityError:
                continue

        conn.commit()
        conn.close()
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤ –±–∞–∑–µ: {count}")


bot = KeyBot()


@bot.event
async def on_ready():
    logger.info(f'–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    bot.generate_keys()

    try:
        synced = await bot.tree.sync()
        logger.info(f'–ì–ª–æ–±–∞–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}')


@bot.tree.command(name='key', description='–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
async def get_key(interaction: discord.Interaction):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞"""
    user_id = interaction.user.id

    conn = sqlite3.connect(bot.db_path)
    c = conn.cursor()

    c.execute("SELECT key FROM keys WHERE user_id = ?", (user_id,))
    existing_key = c.fetchone()

    if existing_key:
        await interaction.response.send_message(
            f"üîë –í–∞—à –∫–ª—é—á: `{existing_key[0]}`\n"
            f"‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–ª—é—á —Ä–∞–Ω–µ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
            ephemeral=True
        )
        conn.close()
        return

    c.execute("SELECT key FROM keys WHERE user_id IS NULL LIMIT 1")
    free_key = c.fetchone()

    if not free_key:
        await interaction.response.send_message(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –∫–ª—é—á–∏ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            ephemeral=True
        )
        conn.close()
        return

    key = free_key[0]

    c.execute("UPDATE keys SET user_id = ? WHERE key = ?", (user_id, key))
    conn.commit()
    conn.close()

    await interaction.response.send_message(
        f"üîë **–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á:** `{key}`\n\n"
        f"üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
        f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á\n"
        f"2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç {MAIN_API_URL} –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n"
        f"3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
        f"4. –ü—Ä–∏–≤—è–∂–∏—Ç–µ Discord –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á\n"
        f"5. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
        f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –≠—Ç–æ—Ç –∫–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!",
        ephemeral=True
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {interaction.user.name} (ID: {user_id}) –ø–æ–ª—É—á–∏–ª –∫–ª—é—á: {key}")


@bot.tree.command(name='verify', description='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏')
async def check_verification(interaction: discord.Interaction):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = interaction.user.id

    conn = sqlite3.connect(bot.db_path)
    c = conn.cursor()

    c.execute("SELECT key, used FROM keys WHERE user_id = ?", (user_id,))
    result = c.fetchone()

    if not result:
        await interaction.response.send_message(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/key` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.",
            ephemeral=True
        )
    else:
        key, used = result
        if used:
            await interaction.response.send_message(
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚è≥ –í–∞—à –∫–ª—é—á `{key}` –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç {MAIN_API_URL} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
                ephemeral=True
            )

    conn.close()


@bot.tree.command(name='stats', description='[–ê–¥–º–∏–Ω] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π')
@app_commands.checks.has_permissions(administrator=True)
async def stats(interaction: discord.Interaction):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    conn = sqlite3.connect(bot.db_path)
    c = conn.cursor()

    c.execute("SELECT COUNT(*) FROM keys")
    total_keys = c.fetchone()[0]

    c.execute("SELECT COUNT(*) FROM keys WHERE user_id IS NOT NULL")
    issued_keys = c.fetchone()[0]

    c.execute("SELECT COUNT(*) FROM keys WHERE used = 1")
    used_keys = c.fetchone()[0]

    c.execute("SELECT COUNT(*) FROM keys WHERE user_id IS NULL")
    available_keys = c.fetchone()[0]

    conn.close()

    embed = discord.Embed(
        title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π",
        color=discord.Color.blue()
    )
    embed.add_field(name="–í—Å–µ–≥–æ –∫–ª—é—á–µ–π", value=f"{total_keys:,}", inline=True)
    embed.add_field(name="–í—ã–¥–∞–Ω–æ", value=f"{issued_keys:,}", inline=True)
    embed.add_field(name="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", value=f"{used_keys:,}", inline=True)
    embed.add_field(name="–î–æ—Å—Ç—É–ø–Ω–æ", value=f"{available_keys:,}", inline=True)

    await interaction.response.send_message(embed=embed, ephemeral=True)


# Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
app = Flask(__name__)
CORS(app)


@app.route('/webhook/verify', methods=['POST', 'OPTIONS'])
def verify_webhook():
    """Endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞"""

    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
        response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
        return response

    try:
        data = request.json

        if data.get('secret') != WEBHOOK_SECRET:
            return jsonify({'error': 'Unauthorized'}), 401

        discord_id = data.get('discord_id')
        key = data.get('key')
        role_type = data.get('role_type', 'member')

        if not discord_id or not key:
            return jsonify({'error': 'Missing required fields'}), 400

        conn = sqlite3.connect(bot.db_path)
        c = conn.cursor()

        c.execute("SELECT user_id, used FROM keys WHERE key = ?", (key,))
        key_data = c.fetchone()

        if not key_data:
            conn.close()
            return jsonify({'error': 'Invalid key'}), 404

        db_user_id, used = key_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if db_user_id != int(discord_id):
            conn.close()
            return jsonify({'error': 'Key does not belong to this user'}), 403

        if used:
            conn.close()
            return jsonify({'error': 'Key already used'}), 400

        # –û—Ç–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        c.execute("UPDATE keys SET used = 1, used_at = CURRENT_TIMESTAMP WHERE key = ?", (key,))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é —Ä–æ–ª—å –≤—ã–¥–∞–≤–∞—Ç—å
        role_id = MEMBER_ROLE_ID if role_type == 'member' else VIEWER_ROLE_ID
        role_name = '–£—á–∞—Å—Ç–Ω–∏–∫' if role_type == 'member' else '–ó—Ä–∏—Ç–µ–ª—å'

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        c.execute(
            "INSERT INTO verification_logs (user_id, key, role_given) VALUES (?, ?, ?)",
            (discord_id, key, role_name)
        )

        conn.commit()
        conn.close()

        # –í—ã–¥–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        asyncio.run_coroutine_threadsafe(
            assign_role(int(discord_id), role_id, role_name),
            bot.loop
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        asyncio.run_coroutine_threadsafe(
            notify_main_api(discord_id),
            bot.loop
        )

        return jsonify({'success': True, 'message': f'Role {role_name} assigned'}), 200

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return jsonify({'error': 'Internal server error'}), 500


async def assign_role(user_id, role_id, role_name):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏"""
    try:
        guild = bot.get_guild(GUILD_ID)
        if not guild:
            logger.error(f"–°–µ—Ä–≤–µ—Ä —Å ID {GUILD_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        member = guild.get_member(user_id)
        if not member:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return

        role = guild.get_role(role_id)
        if not role:
            logger.error(f"–†–æ–ª—å —Å ID {role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await member.add_roles(role)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name} (ID: {user_id}) –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å {role_name}")

        try:
            await member.send(
                f"‚úÖ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n"
                f"–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å **{role_name}** –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}.\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞–≤–∫–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ {MAIN_API_URL}"
            )
        except discord.Forbidden:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏: {e}")


async def notify_main_api(discord_id):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π API –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{MAIN_API_URL}/webhook/discord-verified",
                json={
                    "discord_id": str(discord_id),
                    "key": "",  # –ö–ª—é—á —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω
                    "role_type": "member",
                    "secret": WEBHOOK_SECRET
                }
            )
            if response.status_code == 200:
                logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π API —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π API: {e}")


def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=5001, debug=False)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Discord –±–æ—Ç–∞
    bot.run(BOT_TOKEN)